---
- name: Create vSphere guest from template, configure
  hosts: all
  gather_facts: false
  connection: local

  vars:
    vmgenesis_version: 0-devel
    vsphere_guest_notes: |-
      Created on {{lookup('pipe','date --iso-8601=date --utc')}} using vmgenesis {{ vmgenesis_version }}, from template "{{ vmgenesis_vsphere_source_template }}".  Created by vSphere vCenter username: {{ vmgenesis_vsphere_vcenter_username }} .
      {%- if vmgenesis_vsphere_guest_notes_additional is defined %}


      {{ vmgenesis_vsphere_guest_notes_additional }}
      {%- endif -%}

  tasks:
    - name: XX [build payload] remove existing directory structure, if any
      file:
        path: '.vmgenesis-built-payloads/{{ inventory_hostname }}'
        state: absent

    - name: XX [build payload] create directory structure
      file:
        path: '{{ item.path }}'
        state: directory
        mode: 0755
      with_items:
        - { path: '.vmgenesis-built-payloads/{{ inventory_hostname }}/bin' }
        - { path: '.vmgenesis-built-payloads/{{ inventory_hostname }}/filestore' }
        - { path: '.vmgenesis-built-payloads/{{ inventory_hostname }}/target' }

    - name: XX [build payload] [step 10-hostname--centos7] write vmgenesis-init step binary
      copy:
        content: |
          #!/bin/sh

          STEPNAME="S10-hostname--centos7"

          printf "%s: %s\n" "${STEPNAME}" "writing new hostname to /etc/hostname ."

          printf "%s\n" "{{ inventory_hostname }}" > /etc/hostname
        dest: .vmgenesis-built-payloads/{{ inventory_hostname }}/bin/S10-hostname--centos7
        mode: 0755
      register: returnvalues
    - name: 'DEBUG: Print return values from previous task'
      debug: var=returnvalues

    - name: XX [build payload] [step 20-sshd-hostkeys--centos7] generate sshd host keys
      # notes:
      # See these files on a vanilla CentOS 7 system:
      #
      #     /etc/sysconfig/sshd
      #     /etc/systemd/system/multi-user.target.wants/sshd.service
      #     /usr/sbin/sshd-keygen
      #     /lib/systemd/system/sshd-keygen.service
      #
      # Works with:
      # * keys generated by 'OpenSSH_7.6p1, LibreSSL 2.5.5' on OS X 10.10,
      #   consumed by sshd on CentOS 7 ('OpenSSH_6.6.1p1, OpenSSL 1.0.1e-fips 11 Feb 2013')
      shell: |
        set -x

        printf "DEBUG: inventory_hostname: \"%s\"\n" "{{ inventory_hostname }}"
        printf "DEBUG: PWD: \"%s\"\n" "${PWD}"

        cd "${PWD}/.vmgenesis-built-payloads/{{ inventory_hostname }}/filestore"

        printf "DEBUG: PWD: \"%s\"\n" "${PWD}"

        umask 0077
        ssh-keygen -q -t rsa -f ssh_host_rsa_key -C '' -N ''
        ssh-keygen -q -t ecdsa -f ssh_host_ecdsa_key -C '' -N ''
        ssh-keygen -q -t ed25519 -f ssh_host_ed25519_key -C '' -N ''
      args:
        executable: /bin/sh
      register: returnvalues
    - name: 'DEBUG: Print return values from previous task'
      debug: var=returnvalues

    - name: XX [build payload] [step 20-sshd-hostkeys--centos7] write vmgenesis-init step binary
      copy:
        content: |
          #!/bin/sh

          STEPNAME="S20-sshd-hostkeys--centos7"

          printf "%s: %s\n" "${STEPNAME}" "installing sshd host keys."

          cp --force filestore/ssh_host_rsa_key{,.pub} /etc/ssh/
          chgrp ssh_keys /etc/ssh/ssh_host_rsa_key
          chmod 0640 /etc/ssh/ssh_host_rsa_key
          chmod 0644 /etc/ssh/ssh_host_rsa_key.pub
          if [ -x /sbin/restorecon ]; then
              /sbin/restorecon /etc/ssh/ssh_host_rsa_key{,.pub}
          fi

          cp --force filestore/ssh_host_ecdsa_key{,.pub} /etc/ssh/
          chgrp ssh_keys /etc/ssh/ssh_host_ecdsa_key
          chmod 0640 /etc/ssh/ssh_host_ecdsa_key
          chmod 0644 /etc/ssh/ssh_host_ecdsa_key.pub
          if [ -x /sbin/restorecon ]; then
              /sbin/restorecon /etc/ssh/ssh_host_ecdsa_key{,.pub}
          fi

          cp --force filestore/ssh_host_ed25519_key{,.pub} /etc/ssh/
          chgrp ssh_keys /etc/ssh/ssh_host_ed25519_key
          chmod 0640 /etc/ssh/ssh_host_ed25519_key
          chmod 0644 /etc/ssh/ssh_host_ed25519_key.pub
          if [ -x /sbin/restorecon ]; then
              /sbin/restorecon /etc/ssh/ssh_host_ed25519_key{,.pub}
          fi
        dest: .vmgenesis-built-payloads/{{ inventory_hostname }}/bin/S20-sshd-hostkeys--centos7
        mode: 0755
      register: returnvalues
    - name: 'DEBUG: Print return values from previous task'
      debug: var=returnvalues

    - name: XX [build payload] [step 31-resolvconf--centos7] build configuration file
      copy:
        content: "{{ vmgenesis_vsphere_guest_network_resolvconf }}"
        dest: .vmgenesis-built-payloads/{{ inventory_hostname }}/filestore/resolv.conf
        mode: 0644
      register: returnvalues
    - name: 'DEBUG: Print return values from previous task'
      debug: var=returnvalues

    - name: XX [build payload] [step 31-resolvconf--centos7] write vmgenesis-init step binary
      copy:
        content: |
          #!/bin/sh

          STEPNAME="S31-resolvconf--centos7"

          set -x

          cp --force filestore/resolv.conf /etc/
        dest: .vmgenesis-built-payloads/{{ inventory_hostname }}/bin/S31-resolvconf--centos7
        mode: 0755
      register: returnvalues
    - name: 'DEBUG: Print return values from previous task'
      debug: var=returnvalues

    - name: XX [build payload] [step 33-network-interfaces--centos7] build configuration files
      template:
        src: centos7/etc/sysconfig/network-scripts/ifcfg-interface.j2
        dest: .vmgenesis-built-payloads/{{ inventory_hostname }}/filestore/ifcfg-{{ item.value.vmgenesis_interface_name | default('ens160') }}
      with_dict: "{{ vmgenesis_vsphere_guest_networkadapters }}"
      register: returnvalues
    - name: 'DEBUG: Print return values from previous task'
      debug: var=returnvalues

    - name: XX [build payload] [step 33-network-interfaces--centos7] write vmgenesis-init step binary
      copy:
        content: |
          #!/bin/sh

          STEPNAME="S33-network-interfaces--centos7"

          set -x

          cp --force filestore/ifcfg-* /etc/sysconfig/network-scripts/
        dest: .vmgenesis-built-payloads/{{ inventory_hostname }}/bin/S33-network-interfaces--centos7
        mode: 0755
      register: returnvalues
    - name: 'DEBUG: Print return values from previous task'
      debug: var=returnvalues

    - name: XX [build payload] [step 90-copy-target-to-fs] write vmgenesis-init step binary
      copy:
        content: |
          #!/bin/sh

          STEPNAME="S90-copy-target-to-fs"

          set -x

          find target/ -mindepth 1 -maxdepth 1 -print0 | xargs -0r cp -r --target-directory=/
        dest: .vmgenesis-built-payloads/{{ inventory_hostname }}/bin/S90-copy-target-to-fs
        mode: 0755
      register: returnvalues
    - name: 'DEBUG: Print return values from previous task'
      debug: var=returnvalues

    - name: XX [build payload] [step 99-reboot] write vmgenesis-init step binary
      copy:
        content: |
          #!/bin/sh

          STEPNAME="S99-reboot"

          printf "%s: %s\n" "${STEPNAME}" "reboot scheduled; rebooting when logging subshell has exited."
          (
              exec 2<&-
              exec 1<&-
              while test -d "${VMGENESIS_REDIRECTION_FIFO_DIRECTORY}" ; do
                  sleep 1
              done
              /sbin/shutdown -r now
          ) &
        dest: .vmgenesis-built-payloads/{{ inventory_hostname }}/bin/S99-reboot
        mode: 0755
      register: returnvalues
    - name: 'DEBUG: Print return values from previous task'
      debug: var=returnvalues

    - name: XX [build payload] write vmgenesis-init binary (bin/init)
      copy:
        content: |
          #!/bin/sh

          # This is vmgenesis-init .

          VMGENESIS_LOG_DIRECTORY="/root/vmgenesis"


          VMGENESISINIT_PID="$$"
          VMGENESIS_LOG_FILE="${VMGENESIS_LOG_DIRECTORY}/vmgenesis.log"

          mkdir --parents --mode=0700 "${VMGENESIS_LOG_DIRECTORY}"
          chmod 0700 "${VMGENESIS_LOG_DIRECTORY}"
          touch "${VMGENESIS_LOG_FILE}"
          chmod 0600 "${VMGENESIS_LOG_FILE}"

          export VMGENESIS_REDIRECTION_FIFO_DIRECTORY="$(mktemp --directory --tmpdir vmgenesis-tmp-fifo-XXXXXXXXXX)"
          mkfifo --mode=0600 "${VMGENESIS_REDIRECTION_FIFO_DIRECTORY}/vmgenesis-init-stdout-and-stderr"

          exec 2<&-
          exec 1<&-
          exec 1<>"${VMGENESIS_REDIRECTION_FIFO_DIRECTORY}/vmgenesis-init-stdout-and-stderr"
          exec 2>&1

          # spawning logging subshell:
          #
          # This subshell will keep reading from the named pipe until EOF is
          # encountered.  After that, it will clean up by deleting the named pipe, the
          # directory it resides in, and then exit.
          #
          # Note: The reader of a named pipe will receive EOF once there are no writers
          #       left.
          #
          #       As this subshell closes the stdout and stderr file handles immediately
          #       upon starting, it leaves the parent shell (vmgenesis-init) as the only
          #       writer to the named pipe.
          #
          #       This has the effect that when the parent shell exits, the open file
          #       descriptors are closed, and therefore this subshell will exit as soon
          #       as it has processed the remaining named pipe buffer.
          (
              exec 2<&-
              exec 1<&-

              LINEPREFIX="vmgenesis-init[${VMGENESISINIT_PID}]: "

              while IFS= read -r LINE ; do
                  SYSLOGLIKE_LINEPREFIX="$(date "+%b %e %T") ${HOSTNAME} "
                  printf "%s\n" "${LINE}" | \
                      sed -u -e "s,^.*$,${SYSLOGLIKE_LINEPREFIX}${LINEPREFIX}\0,g" \
                      >> "${VMGENESIS_LOG_FILE}"
              done <"${VMGENESIS_REDIRECTION_FIFO_DIRECTORY}/vmgenesis-init-stdout-and-stderr"

              rm "${VMGENESIS_REDIRECTION_FIFO_DIRECTORY}/vmgenesis-init-stdout-and-stderr"
              rmdir "${VMGENESIS_REDIRECTION_FIFO_DIRECTORY}"
          ) &
          VMGENESIS_LOGGING_SUBSHELL_PID="$!"


          printf "%s\n" "hello, world"
          printf "%s\n" "diagnostic data:"
          printf "  %s\n" "\$0 is \"${0}\""
          printf "  %s\n" "selected environment variables:"
          set | grep -E "^(PATH|PWD|SHELL|VMGENESIS_LOGGING_SUBSHELL_PID|VMGENESIS_REDIRECTION_FIFO_DIRECTORY)=" | sed -e "s,^.*$,    \0,g"
          printf "  %s\n" "output of selected commands:"
          printf "    %-8s %s\n" "'date':" "$(date)"
          printf "    %-8s %s\n" "'id':" "$(id)"

          for STEPEXECUTABLE in bin/S[0-9][0-9]* ; do
              printf "%s\n" "executing ${STEPEXECUTABLE}"
              "${STEPEXECUTABLE}"
          done
        dest: .vmgenesis-built-payloads/{{ inventory_hostname }}/bin/init
        mode: 0755




    - name: XX [build payload] build vmgenesis payload tarball
      shell: |
        set -x

        printf "DEBUG: inventory_hostname: \"%s\"\n" "{{ inventory_hostname }}"
        printf "DEBUG: PWD: \"%s\"\n" "${PWD}"

        GENESIS_SRC_DIRECTORY="${PWD}/.vmgenesis-built-payloads/{{ inventory_hostname }}"
        GENESIS_TARBALL="{{ inventory_hostname }}--$(date --iso-8601=ns).tar.gz"
        GENESIS_TARBALL_LATEST_LINK="{{ inventory_hostname }}.tar.gz"
        GENESIS_TARBALL_DIRECTORY="${PWD}/.vmgenesis-built-tarballs"
        GENESIS_TARBALL_TEMPORARY_BUILD_DIRECTORY="$(mktemp -d --tmpdir genesis-tmp-XXXXXXXXXX)"

        mkdir -p --mode=0700 "${GENESIS_TARBALL_DIRECTORY}"

        printf "DEBUG: GENESIS_SRC_DIRECTORY: \"%s\"\n" "${GENESIS_SRC_DIRECTORY}"
        printf "DEBUG: GENESIS_TARBALL: \"%s\"\n" "${GENESIS_TARBALL}"
        printf "DEBUG: GENESIS_TARBALL_DIRECTORY: \"%s\"\n" "${GENESIS_TARBALL_DIRECTORY}"
        printf "DEBUG: GENESIS_TARBALL_TEMPORARY_BUILD_DIRECTORY: \"%s\"\n" "${GENESIS_TARBALL_TEMPORARY_BUILD_DIRECTORY}"

        cd "${GENESIS_TARBALL_TEMPORARY_BUILD_DIRECTORY}"
        mkdir "genesis"
        cp -pr "${GENESIS_SRC_DIRECTORY}/bin" "genesis/"
        cp -pr "${GENESIS_SRC_DIRECTORY}/filestore" "genesis/"
        cp -pr "${GENESIS_SRC_DIRECTORY}/target" "genesis/"
        tar -cz --owner=root --group=root -f "${GENESIS_TARBALL_DIRECTORY}/${GENESIS_TARBALL}" genesis/
        ln --force --relative --symbolic "${GENESIS_TARBALL_DIRECTORY}/${GENESIS_TARBALL}" "${GENESIS_TARBALL_DIRECTORY}/${GENESIS_TARBALL_LATEST_LINK}"

        printf "[ls begin]\n"
        ls -la
        printf "[ls end]\n"

        rm -rf "${GENESIS_TARBALL_TEMPORARY_BUILD_DIRECTORY}"

        printf "DEBUG: SHA256 of base64 encoded tarball just generated: ";
        base64 -w0 "${GENESIS_TARBALL_DIRECTORY}/${GENESIS_TARBALL}" | sha256sum | cut -c 1-64
        printf "DEBUG: SHA256 of base64 encoded tarball symlink:        ";
        base64 -w0 "${GENESIS_TARBALL_DIRECTORY}/${GENESIS_TARBALL_LATEST_LINK}" | sha256sum | cut -c 1-64

        printf "DEBUG: %s\n" "{{ lookup('pipe','echo .vmgenesis-built-tarballs/' + inventory_hostname + '.tar.gz') }}"
        printf "DEBUG: same, but via ansible lookup:                    %s\n" "{{ lookup('pipe','base64 -w0 .vmgenesis-built-tarballs/' + inventory_hostname + '.tar.gz | sha256sum | cut -c 1-64') }}"
      args:
        executable: /bin/sh
      register: returnvalues
    - name: 'DEBUG: Print return values from previous task'
      debug: var=returnvalues



    - name: XX [deploy guest] create vSphere guest from template (using vmware_guest)
      vmware_guest:
        hostname: "{{ vmgenesis_vsphere_vcenter_hostname }}"
        validate_certs: "{{ vmgenesis_vsphere_vcenter_validate_certs }}"
        username: "{{ vmgenesis_vsphere_vcenter_username }}"
        password: "{{ vmgenesis_vsphere_vcenter_password }}"
        datacenter: "{{ vmgenesis_vsphere_datacenter }}"
        cluster: "{{ vmgenesis_vsphere_cluster }}"
        # if resource_pool is not defined, ansible and/or vSphere seems to
        # select one.
        # TODO: confirm with more testing,
        resource_pool: "{{ vmgenesis_vsphere_resource_pool | default(omit) }}"
        name: "{{ inventory_hostname }}"
        template: "{{ vmgenesis_vsphere_source_template }}"
        hardware:
          # observation: if any of these parameters are undefined, the
          #              resulting guest will just be created identical to the
          #              template.
          #              TODO: confirm with more testing,
          #                    note which versions (of ansible, vSphere etc.)
          #                    it was seen on.
          num_cpus: "{{ vmgenesis_vsphere_guest_num_cpus | default(omit) }}"
          memory_mb: "{{ vmgenesis_vsphere_guest_memory_mb | default(omit) }}"
          scsi: "{{ vmgenesis_vsphere_guest_scsi | default(omit) }}"
        # TODO: add notes about hack/observation:
        #       extra parameters, like in our case, ``vmgenesis_harddiskname``,
        #       set inside the list given to the ``disk`` parameter, are
        #       seemingly ignored by the vmware_guest module.
        #       we take advantage of this behaviour by storing additional
        #       storage related information/configuration in parameters here
        #       and consuming them elsewhere in this ansible play.
        disk: "{{ vmgenesis_vsphere_guest_storage }}"
        annotation: "{{ vsphere_guest_notes }}"
        # observation: if 'state' parameter is undefined, the guest will
        #              remain 'Powered Off' after creation.
      register: returnvalues
    - name: 'DEBUG: Print return values from previous task'
      debug: var=returnvalues

    - name: XX [deploy guest] move Network Adapter(s) to intended Network(s) (using vsphere_guest)
      vsphere_guest:
        vcenter_hostname: "{{ vmgenesis_vsphere_vcenter_hostname }}"
        validate_certs: "{{ vmgenesis_vsphere_vcenter_validate_certs }}"
        username: "{{ vmgenesis_vsphere_vcenter_username }}"
        password: "{{ vmgenesis_vsphere_vcenter_password }}"
        esxi:
          datacenter: "{{ vmgenesis_vsphere_datacenter }}"
        guest: "{{ inventory_hostname }}"
        state: reconfigured
        vm_nic: "{{ vmgenesis_vsphere_guest_networkadapters }}"
      register: returnvalues
    - name: 'DEBUG: Print return values from previous task'
      debug: var=returnvalues





    - name: XX [deploy guest] boot created vSphere guest (using vmware_guest)
      vmware_guest:
        hostname: "{{ vmgenesis_vsphere_vcenter_hostname }}"
        validate_certs: "{{ vmgenesis_vsphere_vcenter_validate_certs }}"
        username: "{{ vmgenesis_vsphere_vcenter_username }}"
        password: "{{ vmgenesis_vsphere_vcenter_password }}"
        datacenter: "{{ vmgenesis_vsphere_datacenter }}"
        name: "{{ inventory_hostname }}"
        state: poweredon
      register: returnvalues
    - name: 'DEBUG: Print return values from previous task'
      debug: var=returnvalues




    - name: XX [deploy guest] execute vmgenesis-armstrong (shell one-liner) inside guest (using vmware_vm_shell)

      # this takes about 1m 7s to return.
      # successfully copied 43K byte strings.

      vmware_vm_shell:
        hostname: "{{ vmgenesis_vsphere_vcenter_hostname }}"
        validate_certs: "{{ vmgenesis_vsphere_vcenter_validate_certs }}"
        username: "{{ vmgenesis_vsphere_vcenter_username }}"
        password: "{{ vmgenesis_vsphere_vcenter_password }}"
        datacenter: "{{ vmgenesis_vsphere_datacenter }}"
        vm_username: "{{ vmgenesis_vsphere_source_template_guestusername }}"
        vm_password: "{{ vmgenesis_vsphere_source_template_guestpassword }}"
        vm_id: "{{ inventory_hostname }}"

        ## observation: the stdout from the command is not made available by
        ##              the vmware_vm_shell module.

        #vm_shell: /bin/sh
        #vm_shell_args: "-c 'printf \"%s\" \"{{ lookup('pipe','base64 -w0 genesis.tar.gz') }}\" | ( cd /tmp && base64 -d - | tar xzf - && /tmp/genesis/bin/init ); sleep 60'"

        vm_shell: /bin/sh
        vm_shell_args: >-
          -c '
          VMGENESIS_LOG_DIRECTORY="/root/vmgenesis";
          VMGENESIS_LOG_FILE="${VMGENESIS_LOG_DIRECTORY}/vmgenesis.log";
          mkdir --parents --mode=0700 "${VMGENESIS_LOG_DIRECTORY}";
          chmod 0700 "${VMGENESIS_LOG_DIRECTORY}";
          touch "${VMGENESIS_LOG_FILE}";
          chmod 0600 "${VMGENESIS_LOG_FILE}";
          LINEPREFIX="vmgenesis-armstrong[$$]: ";
          l() { SYSLOGLIKE_LINEPREFIX="$(date "+%b %e %T") ${HOSTNAME} ";
          printf "%s\n" "${SYSLOGLIKE_LINEPREFIX}${LINEPREFIX}${*}" >> "${VMGENESIS_LOG_FILE}";
          };
          l "execution started.";
          VMGENESIS_PAYLOAD_LENGTH="$(printf "%s" "${VMGENESIS_PAYLOAD}"|wc -c)";
          VMGENESIS_PAYLOAD_SHA256="$(printf "%s" "${VMGENESIS_PAYLOAD}"|sha256sum|cut -c 1-64)";
          l "VMGENESIS_PAYLOAD environment variable size: ${VMGENESIS_PAYLOAD_LENGTH} bytes.";
          l "VMGENESIS_PAYLOAD environment variable SHA256: ${VMGENESIS_PAYLOAD_SHA256} .";
          VMGENESIS_SESSION_DIRECTORY="/tmp/genesis-$(date --iso-8601=ns)";
          mkdir -p "${VMGENESIS_SESSION_DIRECTORY}" && cd "${VMGENESIS_SESSION_DIRECTORY}" &&
          l "created and changed to directory: ${VMGENESIS_SESSION_DIRECTORY} .";
          printf "%s" "${VMGENESIS_PAYLOAD}" | base64 -d - | tar -xz --strip-components=1 -f - &&
          l "decoded VMGENESIS_PAYLOAD and extracted tarball.";
          if [ -x bin/init ]; then
          l "forking execution of vmgenesis-init: bin/init .";
          ( bin/init & );
          fi;
          '
        vm_shell_env:
          - "VMGENESIS_PAYLOAD={{ lookup('pipe','base64 -w0 .vmgenesis-built-tarballs/' + inventory_hostname + '.tar.gz') }}"

      register: returnvalues
    - name: 'DEBUG: Print return values from previous task'
      debug: var=returnvalues












#    - name: Create vSphere guest from template
#      vsphere_guest:
#        vcenter_hostname: "{{ vcenter_hostname }}"
#        validate_certs: no
#        username: "{{ vcenter_user }}"
#        password: "{{ vcenter_pass }}"
#        guest: "{{ inventory_hostname }}"
#        from_template: yes
#        template_src: "{{ vspheredeploy_guest_from_template }}"
#        cluster: "{{ vspheredeploy_vsphere_cluster }}"
#        # note: vsphere_guest's parameter 'resource_pool'
#        #       must include the string "/Resources/",
#        #       prepended to the resource pool name.  discovered via:
#        #       [January 2016] https://stackoverflow.com/questions/34636641/vmware-and-ansible-resource-pools
#        resource_pool: "/Resources/{{ vspheredeploy_vsphere_resource_pool }}"
#        power_on_after_clone: no
#
#    - name: Set 'Notes' field on created vSphere guest (using vmware_guest)
#      # note: it seems like this task always returns 'changed' despite no
#      #       changes are needed.  is it just blindly overwriting the
#      #       annotation field?
#      vmware_guest:
#        hostname: "{{ vcenter_hostname }}"
#        validate_certs: no
#        username: "{{ vcenter_user }}"
#        password: "{{ vcenter_pass }}"
#        datacenter: "{{ vspheredeploy_vsphere_datacenter }}"
#        name: "{{ inventory_hostname }}"
#        annotation: "{{ vspheredeploy_guest_notes }}"
#      when: vspheredeploy_guest_notes is defined
##      register: returnvalues
##    - name: Print return values from previous task
##      debug: var=returnvalues









#    - name: Gather facts on created vSphere guest (using vsphere_guest)
#      vsphere_guest:
#        vcenter_hostname: "{{ vcenter_hostname }}"
#        validate_certs: no
#        username: "{{ vcenter_user }}"
#        password: "{{ vcenter_pass }}"
#        guest: "{{ inventory_hostname }}"
#        vmware_guest_facts: yes
#      register: facts
#    - name: Print gathered facts
#      debug: var=facts
